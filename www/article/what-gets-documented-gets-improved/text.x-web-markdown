% What Gets Documented Gets Improved
% Chris Forno (jekor)
% 2009-01-12 00:00:00 -0700
% Copyright 2009, 2012 Chris Forno

I used to edit my .emacs[^1] directly. One day I decided to convert it into a literate program[^2]. So over the course of a week I went about extracting chunks of code, documenting them, and rearranging them.

The process of converting the file to literate form alone improved it. There were blocks of old unused code I deleted. When I came across lines I'd written when I was less experienced with Emacs, I was able to rewrite them in a more compact and understandable form. And I fixed some annoyances that had always bugged me but only became clear to me as I was reading through the code.

You could argue that just the act of reading the file was what improved the code. But you'd be missing the point. Why would I have read the file if I weren't documenting it?

## Are You Really Reading Your Code?

The only reasons for which I've seen people read production code[^3] are:

 1. to fix an error
 2. to understand the code in order to extend it

Both of these are shallow dips into the code. When performing them, the objective is to get in and get out. We tend to read the code only long enough to understand it for the purpose(s) we currently have in mind. But we're missing a wider, broader understanding of the code. And without that understanding, we can only make focused improvements.

## Incremental Change Is Due to Lack of Gestalt Knowledge

There is nothing wrong with incremental change[^4]. There is tremendous power in [Kaizen](http://en.wikipedia.org/wiki/Kaizen). And maybe that's why it's such a prevalent development model.

But in order to achieve revolutionary improvements in code, we need insight. We need to be able to make connections in the code. The more deeply we understand the code, the more we can hold of it in our head[^5].

## The 3 Layers of Program Documentation

![Documentation Pyramid](/image/documentation-pyramid)

<!-- [[what-gets-documented-gets-improved.files/documentation-pyramid.png]]

     |          | comments     | literate text           | book           |
     |----------+--------------+-------------------------+----------------|
     | **detail**   | function     | inter-function          | super-function |
     | **location** | source file  | source file             | external file  |

-->

### Comments

We know we need comments. Most experienced programmers write them.

Comments are the most detailed level of documentation. They deal with concepts smaller at the function level. They are probably also the most numerous and prevalent form of documentation. But on their own they're not enough.

### Literate Text

Literate text wraps and contextualizes the comments and the blocks of code that they inhabit. It explains the connections and relationships between blocks. It's the glue between paragraphs[^6].

Good literate text is a narrative. It explains concepts as they come along in the natural flow of the program.

Literate text does not require a literate programming tool. They can be written in normal comment blocks in the source of the program. What distinguishes them from comments is that they don't directly refer to a piece of code (such as a function declaration of line of code).

Literate text will naturally arise, especially from programmers who make regular use of comments.

### Handbook

While comments and literate text both serve to document the thought process or mental model of the code, the handbook should step back and explain how to get things done.

Think of the handbook for your program as a guide for new programmers---or yourself once you've been away from the code for too long. It provides a map, an overview of the territory that the program covers.

A handbook can have HOWTOs, FAQs, tutorials. Instead of explaining the inner workings of the code, it should explain how different pieces fit together. It should explain the overall philosophy of the program and the purpose for each component.

## But What About Self-Documenting Code?

Shouldn't we make the code itself more understandable, instead of documenting it? Shouldn't variable names, types, and function signatures illuminate the code well enough?

I don't think there's any such thing as self-documenting code. Ambiguities in human language prevent variable names from conveying their exact use and purpose. Types are helpful, but they're usually a small part of the source code. And function signatures, while possibly the most useful self-documenting piece of source code that I know of, still don't explain everything about a function, especially for functions with side-effects.

The best we can hope for is to make our code more understandable. But that shouldn't prevent us from writing documentation for it anyway. Additionally, I find it easier to make my code understandable after I've written documentation for it. I notice that I use words in the documentation that I use to rename identifiers in my code.

## Writing Code Should Be a 2-Pass Process, At Least

And fixing errors doesn't count as a 2nd pass.

Comments are for documenting code as you write it. And documenting code as you write it can be a distraction.

As with video encoding, we can get a better result with a 2-pass approach. In the first pass you can focus on writing the code. Sprinkle comments as you go for any details that might be unclear.

But now your code is literature. It's a document. And you wouldn't write a document in 1 pass. That's called the first draft! You would proofread it at least once. As you proofread a document, you catch mistakes that are so obvious you're amazed that you made them in the first place. And as you subvocalize what you read you find awkward parts of the document that you need to rewrite. You may change how a sentence starts or move a paragraph up or down.

The same should apply to programming. Just as a sentence or paragraph may not make sense after being written on the fly, a function may not make sense. Or perhaps one paragraph doesn't lead cleanly into another. Maybe a paragraph is trying to say too much and needs to be broken into smaller pieces.

The proofreading becomes even more valuable once you've been away from the document for a while, especially after a period of sleep. Much of what you had stored in short-term memory has been flushed out and you see the document from the perspective of someone who has never seen it before.

So there's no need to force yourself to document as you code. Take your time. Back off from the code for a while. Give your mind room to breathe. But come back later and take a look, otherwise someone will be reading your first draft in the future.

## You Benefit from [Cognitive Dissonance](http://en.wikipedia.org/wiki/Cognitive_dissonance) and Cumulative Effects

When you believe that your program will be read (because you've provided it in a convenient format which shows value) and you have pride in either the code or the documentation, you will work to improve the other.

If one chapter of your book or section of your document looks full, impressive, and is a pleasure to read and you come across another section that falls flat, you'll naturally want to fix it.

It's like having a clean bedroom. When you've cleaned your room you're more alert and intent on keeping it clean. You know the effort it took you to clean it, and you don't want to have to repeat it. Besides, you get enjoyment from the feeling of having a clean room and want it to last.

## Footnotes

[^1]:  A .emacs file is a configuration file for the [Emacs](http://www.gnu.org/software/emacs/) editor. It's actually a program written in the [Elisp](http://en.wikipedia.org/wiki/Emacs_Lisp) programming language.<!-- You can find mine [here](/emacs/dot-emacs.pdf). -->

[^2]:  I used the [Noweb](http://www.cs.tufts.edu/~nr/noweb/) tool, if you're curious.

[^3]:  I'm excluding code that was written for educational purposes, such as code in books, technical papers, programming pearls, etc.

[^4]:  There's nothing wrong with incremental change as long as it's positive overall. Unfortunately, making changes to code without a gestalt knowledge of the code, will often produce a positive change in 1 vector (e.g. fixing a bug) while producing a negative change in others (e.g. introducing more bugs, making the code more complex, or introducing brittle assumptions or coupling).

[^5]:  See the studies of chess masters conducted by [Alfred Binet](http://en.wikipedia.org/wiki/Alfred_Binet).

[^6]:  If you're a TeXnician, it can help to think of it as glue.
